### Retrieve values from your data frame to answer the following questions
### Note that you should get the value as specific as possible (e.g., a single
### cell rather than the whole row!)
# What was the 2015 salary of employee 57
# How many employees got a raise?
# What was the value of the highest raise?
# What was the "name" of the employee who received the highest raise?
# What was the largest decrease in salaries between the two years?
# What was the name of the employee who recieved largest decrease in salary?
# What was the average salary increase?
### Bonus ###
# Write a .csv file of your salaries to your working directory
# For people who did not get a raise, how much money did they lose?
# Is that what you expected them to lose based on how you generated their salaries?
# Create a vector of 100 employees ("Employee 1", "Employee 2", ... "Employee 100)
# Hint: use the `paste()` function to produce the list
employee <- paste("Employee", 1:100)
# Create a vector of 100 random salaries for the year 2014
# Use the `runif()` function to pick a random number between 40000 and 50000
salary <- runif(100, 40000, 50000)
# Create a vector of 100 salaries in 2015 that have increased from 2014 by some amount
# Hint: use `runif()` to add a random number to 2014's salaries. Starting from a
# _negative_ number so that salaries may decrease!
salary.update <- runif(salary, salary -5000, salary + 5000)
salary.update
# Create a data.frame 'salaries' by combining the 3 vectors you just made
# Remember to set `stringsAsFactors=FALSE`!
salaries <- data.frame(employee, salary, salary.update, stringsAsFactors = FALSE)
salaries
# Create a column 'raise' that stores the size of the raise between 2014 and 2015
# Create a column 'got.raise' that is TRUE if the person got a raise
### Retrieve values from your data frame to answer the following questions
### Note that you should get the value as specific as possible (e.g., a single
### cell rather than the whole row!)
# What was the 2015 salary of employee 57
# How many employees got a raise?
# What was the value of the highest raise?
# What was the "name" of the employee who received the highest raise?
# What was the largest decrease in salaries between the two years?
# What was the name of the employee who recieved largest decrease in salary?
# What was the average salary increase?
### Bonus ###
# Write a .csv file of your salaries to your working directory
# For people who did not get a raise, how much money did they lose?
# Is that what you expected them to lose based on how you generated their salaries?
raise <- salaries[ ,4]
# Create a vector of 100 employees ("Employee 1", "Employee 2", ... "Employee 100)
# Hint: use the `paste()` function to produce the list
employee <- paste("Employee", 1:100)
# Create a vector of 100 random salaries for the year 2014
# Use the `runif()` function to pick a random number between 40000 and 50000
salary <- runif(100, 40000, 50000)
# Create a vector of 100 salaries in 2015 that have increased from 2014 by some amount
# Hint: use `runif()` to add a random number to 2014's salaries. Starting from a
# _negative_ number so that salaries may decrease!
salary.update <- runif(salary, salary -5000, salary + 5000)
salary.update
# Create a data.frame 'salaries' by combining the 3 vectors you just made
# Remember to set `stringsAsFactors=FALSE`!
salaries <- data.frame(employee, salary, salary.update, stringsAsFactors = FALSE)
salaries
# Create a column 'raise' that stores the size of the raise between 2014 and 2015
raise <- salaries[ ,4]
raise <- raise == 1
# Create a column 'got.raise' that is TRUE if the person got a raise
### Retrieve values from your data frame to answer the following questions
### Note that you should get the value as specific as possible (e.g., a single
### cell rather than the whole row!)
# What was the 2015 salary of employee 57
# How many employees got a raise?
# What was the value of the highest raise?
# What was the "name" of the employee who received the highest raise?
# What was the largest decrease in salaries between the two years?
# What was the name of the employee who recieved largest decrease in salary?
# What was the average salary increase?
### Bonus ###
# Write a .csv file of your salaries to your working directory
# For people who did not get a raise, how much money did they lose?
# Is that what you expected them to lose based on how you generated their salaries?
install.packages("nycflights13")
library("nycflights13")
View(head(flights))
library(nycflights13)
library(dplyr)
View(nycflights13)
# Exercise 4: DPLYR and flights data
# Install the `nycflights13` package. Load (`library()`) the package.
# You'll also need to load `dplyr`
install.packages("nycflights13")
library(nycflights13)
library(dplyr)
# The data.frame `flights` should now be accessible to you.
# Use functions to inspect it: how many rows and columns does it have?
# What are the names of the columns?
# use `??flights` to search for documentation on the data set (for what cols are)
View(nycflights13)
# Use `dplyr` to give the data frame a new column that is the amount of time gained in the air
# Use `dplyr` to sort your data.frame descending by the column you just created.
# Remember to save this as a variable (or in the same one!)
# For practice, repeat the last 2 steps in a single statement using the pipe operator
# Make a histogram of the amount of gain using the `hist()` function
# On average, did flights gain or lose time?
# Note: use the `na.rm = TRUE` argument to remove NA values from your aggregation
# Create a data.frame of flights headed to seatac ('SEA'), only including the
# origin, destination, and the "gain" column you just created
# On average, did flights to seatac gain or loose time?
# Consider flights from JFK to SEA. What was the average, min, and max air time
# of those flights? Bonus: use pipes to answer this question in one statement!
# (and don't show any other data)
install.packages("nycflights13")
View(nycflights13)
# Exercise 4: DPLYR and flights data
# Install the `nycflights13` package. Load (`library()`) the package.
# You'll also need to load `dplyr`
install.packages("nycflights13")
library(nycflights13)
library(dplyr)
# The data.frame `flights` should now be accessible to you.
# Use functions to inspect it: how many rows and columns does it have?
# What are the names of the columns?
# use `??flights` to search for documentation on the data set (for what cols are)
View(nycflights13)
# Use `dplyr` to give the data frame a new column that is the amount of time gained in the air
# Use `dplyr` to sort your data.frame descending by the column you just created.
# Remember to save this as a variable (or in the same one!)
# For practice, repeat the last 2 steps in a single statement using the pipe operator
# Make a histogram of the amount of gain using the `hist()` function
# On average, did flights gain or lose time?
# Note: use the `na.rm = TRUE` argument to remove NA values from your aggregation
# Create a data.frame of flights headed to seatac ('SEA'), only including the
# origin, destination, and the "gain" column you just created
# On average, did flights to seatac gain or loose time?
# Consider flights from JFK to SEA. What was the average, min, and max air time
# of those flights? Bonus: use pipes to answer this question in one statement!
# (and don't show any other data)
library(nycflights13)
??flights
View(head(flights))
flights <- mutate(flights, gain = arr_delay - dep_delay)
View(head(flights))
arrange(flights, -gain)
flights <- arrange(flights, -gain)
View(head(flights))
flights <- mutate(flights, gain = arr_delay - dep_delay) %>%
arrange(flights, -gain)
View(head(flights))
flights <- mutate(flights, gain = arr_delay - dep_delay) %>%
arrange(-gain)
flights <- mutate(flights, gain = arr_delay - dep_delay) %>%
arrange(-gain)
View(head(flights))
hist(flights$gain)
sum(select(gain))
mean(flights$gain)
mean(flights$gain, na.rm = TRUE)
seatac <- data.frame(select(flights, origin, destination, gain))
seatac <- data.frame(select(flights, origin, dest, gain))
seatac
mean(select(seatac, gain))
mean(select(seatac, gain), na.rm = TRUE)
mean(select(flights, gain), na.rm = TRUE)
mean(seatac$gain, na.rm = TRUE)
mean(seatac$gain, na.rm = TRUE)
seatac <- data.frame(select(flights, origin, dest = "SEA", gain))
seatac <- data.frame(select(flights, origin, dest == "SEA", gain))
seatac <- data.frame(select(filter(dest == "SEA"))
# On average, did flights to seatac gain or loose time?
mean(seatac$gain, na.rm = TRUE)
seatac <- data.frame(filter(dest == "SEA"))
seatac <- data.frame(filter(dest = "SEA"))
to.seatac <- flights %>% select(origin, dest, gain) %>% filter(dest = "SEA")
to.seatac <- flights %>% select(origin, dest, gain) %>% filter(dest == "SEA")
to.seatac
mean(seatac$gain, na.rm = TRUE)
mean(to.seatac$gain, na.rm = TRUE)
# Exercise 4: DPLYR and flights data
# Install the `nycflights13` package. Load (`library()`) the package.
# You'll also need to load `dplyr`
#install.packages("nycflights13")
library(nycflights13)
library(dplyr)
# The data.frame `flights` should now be accessible to you.
# Use functions to inspect it: how many rows and columns does it have?
# What are the names of the columns?
# use `??flights` to search for documentation on the data set (for what cols are)
View(head(flights))
# Use `dplyr` to give the data frame a new column that is the amount of time gained in the air
#flights <- mutate(flights, gain = arr_delay - dep_delay)
# Use `dplyr` to sort your data.frame descending by the column you just created.
# Remember to save this as a variable (or in the same one!)
#flights <- arrange(flights, -gain)
# For practice, repeat the last 2 steps in a single statement using the pipe operator
flights <- mutate(flights, gain = arr_delay - dep_delay) %>%
arrange(-gain)
# Make a histogram of the amount of gain using the `hist()` function
hist(flights$gain)
# On average, did flights gain or lose time?
# Note: use the `na.rm = TRUE` argument to remove NA values from your aggregation
mean(flights$gain, na.rm = TRUE)
# Create a data.frame of flights headed to seatac ('SEA'), only including the
# origin, destination, and the "gain" column you just created
to.seatac <- flights %>% select(origin, dest, gain) %>% filter(dest == "SEA")
to.seatac
# On average, did flights to seatac gain or loose time?
mean(to.seatac$gain, na.rm = TRUE)
# Consider flights from JFK to SEA. What was the average, min, and max air time
# of those flights? Bonus: use pipes to answer this question in one statement!
# (and don't show any other data)
mean(flights$gain, na.rm = TRUE)
filter(flights, origin == "JFK", dest == "SEA") %>%
summarize(
average.air.time = mean(air_time),
min.air.time = min(air_time),
max.air.time = max(air_time)
)
filter(flights, origin == "JFK", dest == "SEA") %>%
summarize(
average.air.time = mean(air_time, na.rm = TRUE),
min.air.time = min(air_time, na.rm = TRUE),
max.air.time = max(air_time, na.rm = TRUE)
)
flights
dep.delay.by.month <- flights %>% group_by(month)
dep.delay.by.month <- flights %>% group_by(month) %>%
summarize(mean(dep_delay))
dep.delay.by.month <- flights %>% group_by(month) %>%
summarize(delay = mean(dep_delay))
dep.delay.by.month
dep.delay.by.month <- flights %>% group_by(month) %>%
summarize(delay = mean(dep_delay,na.rm = TRUE))
dep.delay.by.month
filter(dep.delay.by.month, delay == max(delay))
plot(dep.delay.by.month)
flights %>% group_by(dest) %>%
summarise(delay = mean(arr_delay), na.rm = TRUE) %>%
arrange(-arr_delay)
flights %>% group_by(dest) %>%
summarise(delay = mean(arr_delay), na.rm = TRUE) %>%
arrange(-delay)
flights
View(flights)
avg.destination.delay <- flights %>%
group_by(dest) %>%
summarise(avg.delay = mean(arr_delay, na.rm = TRUE)) %>%
mutate(faa = dest) %>%
left_join(airports, by = "faa") %>%
arrange(-delay)
avg.destination.delay <- flights %>%
group_by(dest) %>%
summarise(avg.delay = mean(arr_delay, na.rm = TRUE)) %>%
mutate(faa = dest) %>%
left_join(airports, by = "faa") %>%
arrange(-avg.delay)
View(flights)
install.packages("httr")
library(httr)
GET("https://ischool.uw.edu/")
query.params <- list(q = "informatics")
GET("https://www.google.com/search", query = query.params)
base.uri <- "https://api.github.com"
resource <- paste0("/users/","info201-w17","/repos")
GET(paste0(base.uri, resource))
response <- GET(paste0(base.uri, resource))
content(response, "text")
install.packages("jsonlite")
library("jsonlite")
json <- '{"first_name":"Ada","job":"Programmer","pets":["rover","fluffy","mittens"],"favorites":{"music":"jazz","food":"pizza","numbers":[12, 42]}}'
ada <- fromJSON(json)  # a list!
ada
body <- content(response, "text")
repos <- fromJSON(body)  # a data frame!
repos
GET("http://data.unhcr.org/wiki/index.php/API_Documentation.html")
response <- GET("http://data.unhcr.org/wiki/index.php/API_Documentation.html")
body <- content(response, "text")
response <- GET("http://data.unhcr.org/wiki/index.php/API_Documentation.html")
body <- content(response, "text")
install.packages("ggplot2")
library(ggplot2)
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = hwy))
View(mpg)
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = hwy, color = class))
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = hwy, color = class), size = 4)
ggplot(data = mpg) +
geom_bar(mapping = aes(x = class))
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = hwy)) +
geom_smooth(mapping = aes(x = displ, y = hwy), se=FALSE)
ggplot(data = mpg, mapping = aes(x = displ, y = hwy)) +
geom_point() +
geom_smooth(se=FALSE)
library(ggplot2)
library(dplyr)
?diamonds
colnames(diamonds)
nrow(diamonds)
diamonds.sample <- sample_n(diamonds)
diamonds.sample <- sample_n(diamonds, 1000)
source('~/School/INFO 201/module13-ggplot2/exercise-1/exercise.R', echo=TRUE)
ggplot(data = diamonds.sample)
ggplot(data = diamonds.sample)
colnames(diamonds)
nrow(diamonds)
ggplot(data = diamonds.sample) +
geom_point(x = carat, y = price)
ggplot(data = diamonds.sample) +
geom_point(mapping = aes(x = carat, y = price))
ggplot(data = diamonds.sample, mapping = aes(x = carat, y = price)) +
geom_point(color = clarity)
ggplot(data = diamonds.sample, mapping = aes(x = carat, y = price, color = clarity)) +
geom_point()
ggplot(data = diamonds, mapping = aes(x = carat, y = price, color = clarity)) +
geom_point()
ggplot(data = diamonds, mapping = aes(x = carat, y = price), color = blue) +
geom_point()
ggplot(data = diamonds.sample, mapping = aes(x = carat, y = price), color = "blue") +
geom_point()
ggplot(data = diamonds.sample, mapping = aes(x = carat, y = price)) +
geom_point(color = "blue")
ggplot(data = diamonds.sample, mapping = aes(x = carat, y = price, shape = cut)) +
geom_point()
ggplot(data = diamonds.sample, mapping = aes(x = carat, y = cut, shape = price)) +
geom_point()
ggplot(data = diamonds.sample, mapping = aes(x = carat, y = cut, size = price)) +
geom_point()
ggplot(data = diamonds.sample, mapping = aes(x = carat, y = cut, size = price, color = price)) +
geom_point()
ggplot(data = diamonds.sample, mapping = aes(x = carat, y = price, color = carat)) +
geom_line()
ggplot(data = diamonds.sample, mapping = aes(x = carat, y = price, color = carat)) +
geom_smooth()
ggplot(data = diamonds.sample, mapping = aes(x = cut)) +
geom_bar()
ggplot(data = diamonds.sample, mapping = aes(x = cut, fill = clarity)) +
geom_bar()
ggplot(data = diamonds.sample, mapping = aes(x = price, fill = clarity)) +
geom_histogram()
ggplot(data = diamonds.sample, mapping = aes(x = depths, fill = clarity)) +
geom_histogram()
ggplot(data = diamonds.sample, mapping = aes(x = price, fill = clarity)) +
geom_histogram()
library(ggplot2)
library(dplyr)
?diamonds
ggplot(data = diamonds, mapping = aes(x = cut)) +
geom_bar()
ggplot(data = diamonds, mapping = aes(x = cut)) +
stat_count()
ggplot(data = diamonds, mapping = aes(x = cut, y = depth)) +
stat_summary()
ggplot(data = diamonds, mapping = aes(x = cut, y = depth)) +
stat_summary(fun.ymin = min, fun.ymax = max, fun.y = median)
ggplot(data = diamonds, mapping = aes(x = cut, fill = clarity)) +
geom_bar()
ggplot(data = diamonds, mapping = aes(x = cut, fill = clarity), position = "fill") +
geom_bar()
ggplot(data = diamonds, mapping = aes(x = cut, fill = clarity), position = "dodge") +
geom_bar()
ggplot(data = diamonds, mapping = aes(x = cut, y = clarity)) +
geom_point()
ggplot(data = diamonds, mapping = aes(x = cut, y = clarity), position = "jitter") +
geom_point()
ggplot(data = diamonds, mapping = aes(x = color, y = price)) +
geom_boxplot()
ggplot(data = diamonds, mapping = aes(x = color, y = price)) +
geom_boxplot() +
scale_y_log10()
ggplot(data = diamonds, mapping = aes(x = color, y = price)) +
geom_violin() +
scale_y_log10()
install.packages("shiny")  # once per machine
library("shiny")  # load the package
my.ui <- fluidPage(
# formatted content
h1("Hello Shiny"),
# control widget
textInput('user.name', label="What is your name?")
)
my.ui <- fluidPage(
# formatted content
h1("Hello Shiny"),
# control widget
textInput('user.name', label="What is your name?")
)
# The server is a function that takes
# `input` and `output` arguments
my.server <- function(input, output) {
# use values from `input`
# assign values to `output`
# we'll fill this in soon
}
#install.packages("shiny")  # once per machine
library("shiny")  # load the package
# define a UI for the app
my.ui <- fluidPage(
# formatted content
h1("Hello Shiny"),
# control widget
textInput('user.name', label="What is your name?")
)
# The server is a function that takes
# `input` and `output` arguments
my.server <- function(input, output) {
# use values from `input`
# assign values to `output`
# we'll fill this in soon
}
# create and run the Shiny app
shinyApp(ui = my.ui, server = my.server)
install.packages(ggmap)
install.packages("ggmap")
install.packages("leaflet")
shiny::runApp('School/INFO 201/final_project')
collision.data <- read.csv("./SDOT_Collisions.csv", stringsAsFactors = FALSE)
View(collision.data)
coordinates <- collision.data$Shape
date <- collision.data$INCDATE
collision.data <- mutate(collision.data, "Latitude" = lat, "Longitude" = lng, "Year" = year, "Date" = date) %>%
select(ADDRTYPE, COLLISIONTYPE, DISTANCE, INATTENTIONIND, INCDTTM, INJURIES, JUNCTIONTYPE,
LIGHTCOND, LOCATION, PERSONCOUNT, ROADCOND, SDOT_COLDESC, SEVERITYDESC, ST_COLDESC,
VEHCOUNT, WEATHER, Latitude, Longitude, Year, Date)
View(collision.data)
ballard.limits <- list(upper.lng = -122.360702, upper.lat = 47.690566, lower.lng = -122.410012, lower.lat = 47.655839)
collision.data$INATTENTIONIND[is.na(collision.data$INATTENTIONIND)] <- "N"
View(collision.data)
library(dplyr)
collision.data <- read.csv("./SDOT_Collisions.csv", stringsAsFactors = FALSE)
collision.data[collision.data==""] <- NA
coordinates <- collision.data$Shape
date <- collision.data$INCDATE
lat <- sapply(strsplit(coordinates, split=", "), "[", 1)
lng <- sapply(strsplit(coordinates, split=", "), "[", 2)
lat <- gsub("\\(", "", lat)
lng <- gsub(")", "", lng)
lat <- signif(as.numeric(lat), 8)
lng <- signif(as.numeric(lng), 8)
lat
lng
x <- c(lat, lng)
x <- data.frame(c(lat, lng))
View(x)
x <- data.frame(lat, lng)
View(x)
library(ggmap)
Seattle <- ggmap(location = "Seattle, WA", source = "google", maptype = "roadmap", crop = FALSE, zoom = 8)
Seattle <- ggmap(location = "Orlando, FL", source = "google", maptype = "roadmap", crop = FALSE, zoom = 8)
Seattle <- qmap(location = "boston university")
Seattle <- qmap(location = "boston university")
View(collision.data)
seattle.map <- qmap("seattle", zoom = 11, source = "stamen", maptype = "toner")
seattle.map
seattle.map <- qmap("seattle", zoom = 11, source = "stamen")
seattle.map
seattle.map <- qmap("seattle", zoom = 11, source = "stamen", toner = "satellite")
seattle.map
seattle.map <- qmap("seattle", zoom = 11, source = "stamen", maptype = "toner")
seattle.map
seattle.map <- qmap("seattle", zoom = 11, source = "stamen", maptype = "satellite")
seattle.map
shiny::runApp()
collision.data <- read.csv("./SDOT_Collisions.csv", stringsAsFactors = FALSE)
View(collision.data)
collision.data <- group_by(collision.data, ROADCOND)
library(dplyr)
library(ggmap)
collision.data <- group_by(collision.data, ROADCOND)
View(collision.data)
View(collision.data)
collision.data <- group_by(collision.data, ROADCOND) %>%
filter(SEVERITYCODE)
road.conditions <- group_by(collision.data, ROADCOND)
View(road.conditions)
road.conditions <- group_by(collision.data, ROADCOND)
ggplot(data = road.conditions, mapping = aes(x = ROADCOND, fill = SEVERITYCODE)) +
geom_bar()
seattle.map <- qmap("seattle", zoom = 11, source = "stamen", maptype = "satellite")
seattle.map
library(dplyr)
library(ggmap)
collision.data <- read.csv("./SDOT_Collisions.csv", stringsAsFactors = FALSE)
collision.data[collision.data==""] <- NA
coordinates <- collision.data$Shape
date <- collision.data$INCDATE
lat <- sapply(strsplit(coordinates, split=", "), "[", 1)
lng <- sapply(strsplit(coordinates, split=", "), "[", 2)
lat <- gsub("\\(", "", lat)
lng <- gsub(")", "", lng)
lat <- signif(as.numeric(lat), 8)
lng <- signif(as.numeric(lng), 8)
x <- data.frame(lat, lng)
seattle.map <- qmap("seattle", zoom = 11, source = "stamen", maptype = "satellite")
seattle.map
seattle.map <- qmap("seattle", zoom = 11, maptype = "satellite")
seattle.map
seattle.map <- qmap("seattle", zoom = 20, maptype = "satellite")
seattle.map
seattle.map <- qmap("seattle", zoom = 15, maptype = "satellite")
seattle.map
library(leaflet)
map <- leaflet()
source('~/.active-rstudio-document', echo=TRUE)
map <- leaflet() %>%
addTiles() %>%
setView(-122.339220, 47.677622, 12)
map <- leaflet() %>%
addTiles() %>%
setView(-122.339220, 47.677622, 12)
map
shiny::runApp()
