<<<<<<< HEAD
=======
dimensions$size <- 5
}
})
})
runApp('Dropbox/Classes/INFO201/Assignments/a8-data-app-ktran29')
library(ggplot2)
runApp('Dropbox/Classes/INFO201/Assignments/a8-data-app-ktran29')
runApp('Dropbox/Classes/INFO201/Assignments/a8-data-app-ktran29')
runApp('Dropbox/Classes/INFO201/Assignments/a8-data-app-ktran29')
runApp('Dropbox/Classes/INFO201/Assignments/a8-data-app-ktran29')
runApp('Dropbox/Classes/INFO201/Assignments/a8-data-app-ktran29')
runApp('Dropbox/Classes/INFO201/Assignments/a8-data-app-ktran29')
runApp('Dropbox/Classes/INFO201/Assignments/a8-data-app-ktran29')
runApp('Dropbox/Classes/INFO201/Assignments/a8-data-app-ktran29')
runApp('Dropbox/Classes/INFO201/Assignments/a8-data-app-ktran29')
runApp('Dropbox/Classes/INFO201/Assignments/a8-data-app-ktran29')
runApp('Dropbox/Classes/INFO201/Assignments/a8-data-app-ktran29')
runApp('Dropbox/Classes/INFO201/Assignments/a8-data-app-ktran29')
runApp('Dropbox/Classes/INFO201/Assignments/a8-data-app-ktran29')
runApp('Dropbox/Classes/INFO201/Assignments/a8-data-app-ktran29')
runApp('Dropbox/Classes/INFO201/Assignments/a8-data-app-ktran29')
runApp('Dropbox/Classes/INFO201/Assignments/a8-data-app-ktran29')
runApp('Dropbox/Classes/INFO201/Assignments/a8-data-app-ktran29')
?observeEvent
runApp('Dropbox/Classes/INFO201/Assignments/a8-data-app-ktran29')
?sliderInput
runApp('Dropbox/Classes/INFO201/Assignments/a8-data-app-ktran29')
runApp('Dropbox/Classes/INFO201/Assignments/a8-data-app-ktran29')
runApp('Dropbox/Classes/INFO201/Assignments/a8-data-app-ktran29')
View(iris)
View(iris)
?geom_point
?ggplot
?mapping
?aes
filtered.iris <- iris %>% mutate("Part" = c("Sepal", "Petal"))
filtered.iris <- iris %>% mutate("Part" = c("Sepal", "Petal"))
sepal.data <- list(iris$Sepal.Length, iris$Sepal.Width, "Sepal")
sepal.data <- list(Length = iris$Sepal.Length, Width = iris$Sepal.Width, Part = "Sepal")
petal.data <- list(Length = iris$Petal.Length, Width = iris$Petal.Width, Part = "Petal")
a <- data_frame(sepal.data, petal.data)
View(a)
a <- data(sepal.data, petal.data)
(sepal.data, petal.data)
a <- data_frame(sepal.data, petal.data)
View(a)
View(iris)
a <- data.frame(sepal.data, petal.data)
View(a)
sepal.data <- list(iris$Sepal.Length, iris$Sepal.Width, "Sepal")
petal.data <- list(iris$Petal.Length, iris$Petal.Width, "Petal")
a <- data.frame(sepal.data, petal.data)
View(a)
sepal.data <- list(Length = iris$Sepal.Length, Width = iris$Sepal.Width, Part = "Sepal")
petal.data <- list(Length = iris$Petal.Length, Width = iris$Petal.Width, Part = "Petal")
a <- data.frame(sepal.data, petal.data)
runApp('Dropbox/Classes/INFO201/Assignments/a8-data-app-ktran29')
petal.data <- data.frame(Length = iris$Petal.Length, Width = iris$Petal.Width, Part = "Petal", Species = iris$species)
sepal.data <- list(Length = iris$Sepal.Length, Width = iris$Sepal.Width, Part = "Sepal", Species = iris$species)
petal.data <- list(Length = iris$Petal.Length, Width = iris$Petal.Width, Part = "Petal", Species = iris$species)
a <- data.frame(sepal.data, petal.data)
sepal.data <- list(Length = iris$Sepal.Length, Width = iris$Sepal.Width, Part = "Sepal", Species = iris$species)
petal.data <- list(Length = iris$Petal.Length, Width = iris$Petal.Width, Part = "Petal", Species = iris$species)
View(a)
sepal.data <- data.frame(Length = iris$Sepal.Length, Width = iris$Sepal.Width, Part = "Sepal", Species = iris$Species)
sepal.data <- data.frame(Length = iris$Sepal.Length, Width = iris$Sepal.Width, Part = "Sepal", Species = iris$Species)
petal.data <- data.frame(Length = iris$Petal.Length, Width = iris$Petal.Width, Part = "Petal", Species = iris$Species)
View(petal.data)
filtered.iris <- iris %>% full_join(sepal.data, petal.data)
filtered.iris <- iris %>% full_join(sepal.data, petal.data)
sepal.data <- data.frame(Length = iris$Sepal.Length, Width = iris$Sepal.Width, Part = "Sepal", Species = iris$Species, stringsAsFactors = FALSE)
petal.data <- data.frame(Length = iris$Petal.Length, Width = iris$Petal.Width, Part = "Petal", Species = iris$Species, stringsAsFactors = FALSE)
filtered.iris <- iris %>% full_join(sepal.data, petal.data)
View(sepal.data)
filtered.iris <- iris %>% left_join(sepal.data, petal.data)
sepal.data <- data.frame(Length = iris$Sepal.Length, Width = iris$Sepal.Width, Part = "Sepal", Species = iris$Species, stringsAsFactors = FALSE)
iris$Species
typeof(iris$Species)
unlist(iris$Species)
as.list(iris$Species)
(iris$Species)
(iris$Species[1])
(iris$Species[2])
data("iris", stringsAsFactors = FALSE)
data("iris")
iris <- data.frame(iris, stringsAsFactors = FALSE)
data("iris")
data("iris")
iris <- data.frame(iris, stringsAsFactors = FALSE)
?data
?data
iris <- data.frame(lapply(iris, as.character), stringsAsFactors=FALSE)
data("iris")
data("iris")
data
iris <- data.frame(lapply(iris, as.character), stringsAsFactors=FALSE)
data("iris")
sepal.length.range <- range(iris$Sepal.Length)
sepal.width.range <- range(iris$Sepal.Width)
petal.length.range <- range(iris$Petal.Length)
petal.width.range <- range(iris$Petal.Width)
shinyUI(fluidPage(
titlePanel(em("Iris Data")),
sidebarLayout(
sidebarPanel(
radioButtons("part", # radio button input for either part of the iris
"Flower Part:",
c("Sepal" = "sepal",
"Petal" = "petal")),
checkboxGroupInput("species", # checkbox inputs for iris species
"Species:",
c("Setosa" = "setosa",
"Versicolor" = "versicolor",
"Virginica" = "virginica"),
c("setosa", "versicolor", "virginica")
),
conditionalPanel( # panel that only displays if the 'sepal' radio button is selected
condition = "input.part == 'sepal'",
sliderInput("sepal.length", # slider input for sepal length
"Sepal Length:",
sepal.length.range[1],
sepal.length.range[2],
sepal.length.range), # using a vector as initial value creates a double-ended slider
sliderInput("sepal.width", # slider input for sepal width
"Sepal Width:",
sepal.width.range[1],
sepal.width.range[2],
sepal.width.range)
),
conditionalPanel( # panel that only displays if the 'petal' radio button is selected
condition = "input.part == 'petal'",
sliderInput("petal.length", # slider input for petal length
"Petal Length:",
petal.length.range[1],
petal.length.range[2],
petal.length.range),
sliderInput("petal.width", # slider input for petal length
>>>>>>> comment
"Petal Width:",
petal.width.range[1],
petal.width.range[2],
petal.width.range)
)
),
mainPanel(
tabsetPanel(type = "tabs",
tabPanel("Table", tableOutput("table")),
tabPanel("Plot", plotOutput("plot",
brush = "brush", # adds brush input
dblclick = "dblclick")) # adds double click input
)
)
)
))
sepal.data <- data.frame(Length = iris$Sepal.Length, Width = iris$Sepal.Width, Part = "Sepal", Species = as.character(iris$Species))
petal.data <- data.frame(Length = iris$Petal.Length, Width = iris$Petal.Width, Part = "Petal", Species = lapply(iris$Species, as.character)
filtered.iris <- iris %>% left_join(sepal.data, petal.data)
# creates a shiny server
shinyServer(function(input, output) {
# reactive function that filters the iris data based on button selections
filter.iris.data <- reactive({
if(input$part == "both") {
filtered.iris <- iris %>%
filter(Sepal.Length > input$sepal.length[1] & Sepal.Length < input$sepal.length[2]) %>%
filter(Sepal.Width > input$sepal.width[1] & Sepal.Width < input$sepal.width[2]) %>%
filter(Petal.Length > input$petal.length[1] & Petal.Length < input$petal.length[2]) %>%
filter(Petal.Width > input$petal.width[1] & Petal.Width < input$petal.width[2])
colnames(filtered.iris) <- c("Sepal Length", "Sepal Width", "Petal Length", "Petal Width", "Species")
} else {
# filters the data based on the length/width range input for either sepals or petals
if(input$part == "sepal") { # selects only sepal data if sepal button is selected
filtered.iris <- select(iris, Sepal.Length, Sepal.Width, Species) %>%
filter(Sepal.Length > input$sepal.length[1] & Sepal.Length < input$sepal.length[2]) %>%
filter(Sepal.Width > input$sepal.width[1] & Sepal.Width < input$sepal.width[2])
} else { # selects only petal data if petal button is selected
filtered.iris <- select(iris, Species, Petal.Length, Petal.Width) %>%
filter(Petal.Length > input$petal.length[1] & Petal.Length < input$petal.length[2]) %>%
filter(Petal.Width > input$petal.width[1] & Petal.Width < input$petal.width[2])
}
colnames(filtered.iris) <- c("Length", "Width", "Species") # changes column names to be more readable
# and universal
}
filtered.iris <- filter(filtered.iris, Species %in% input$species) # filters data for selected species
return(filtered.iris)
})
# renders a table
output$table <- renderTable({
return(filter.iris.data())
})
# reactive values for x and y coordinates
dimensions <- reactiveValues(x = NULL, y = NULL)
# creates a plot with x and y values mapped to iris part length and width
# color is mapped to iris species
output$plot <- renderPlot({
filtered.iris <- filter.iris.data()
if(input$part == "both") {
iris.plot <- ggplot
} else {
iris.plot <- ggplot(filtered.iris, mapping = aes(x = Length, y = Width, color = Species))
}
iris.plot + geom_point(size = 5) +
coord_cartesian(xlim = dimensions$x, ylim = dimensions$y) # plot coordinates change based on reactive values
return(iris.plot)
})
# adds a double click listener
observeEvent(input$dblclick, {
brush <- input$brush
if (!is.null(brush)) { # if a brush exists, changes reactive x and y coordinate values to the box x and y values
dimensions$x <- c(brush$xmin, brush$xmax)
dimensions$y <- c(brush$ymin, brush$ymax)
} else { # otherwise it's back to the plot values
dimensions$x <- NULL
dimensions$y <- NULL
}
})
})
sepal.data <- data.frame(Length = iris$Sepal.Length, Width = iris$Sepal.Width, Part = "Sepal", Species = lapply(iris$Species, as.character))
Species
petal.data <- data.frame(Length = iris$Petal.Length, Width = iris$Petal.Width, Part = "Petal", Species = lapply(iris$Species, as.character))
sepal.data <- data.frame(Length = iris$Sepal.Length, Width = iris$Sepal.Width, Part = "Sepal", Species = as.character(iris$Species), stringsAsFactors = FALSE)
petal.data <- data.frame(Length = iris$Petal.Length, Width = iris$Petal.Width, Part = "Petal", Species = as.character(iris$Species), stringsAsFactors = FALSE)
filtered.iris <- iris %>% full_join(sepal.data, petal.data)
sepal.data <- data.frame(length = iris$Sepal.Length, width = iris$Sepal.Width, part = "Sepal", species = as.character(iris$Species), stringsAsFactors = FALSE)
petal.data <- data.frame(length = iris$Petal.Length, width = iris$Petal.Width, part = "Petal", species = as.character(iris$Species), stringsAsFactors = FALSE)
filtered.iris <- iris %>% full_join(sepal.data, petal.data)
typeof(sepal.data)
sepal.data <- as.data.frame(length = iris$Sepal.Length, width = iris$Sepal.Width, part = "Sepal", species = as.character(iris$Species), stringsAsFactors = FALSE)
typeof(iris)
is.data.frame(iris)
is.data.frame(sepal.data)
filtered.iris <- full_join(sepal.data, petal.data)
sepal.data <- data.frame(Length = iris$Sepal.Length, Width = iris$Sepal.Width, Part = "Sepal", Species = as.character(iris$Species), stringsAsFactors = FALSE)
petal.data <- data.frame(Length = iris$Petal.Length, Width = iris$Petal.Width, Part = "Petal", Species = as.character(iris$Species), stringsAsFactors = FALSE)
filtered.iris <- full_join(sepal.data, petal.data)
View(filtered.iris)
View(filtered.iris)
sepal.data <- data.frame(Length = iris$Sepal.Length, Width = iris$Sepal.Width, Species = as.character(iris$Species), Part = "Sepal")
petal.data <- data.frame(Length = iris$Petal.Length, Width = iris$Petal.Width, Species = as.character(iris$Species), Part = "Petal")
filtered.iris <- full_join(sepal.data, petal.data)
filtered.iris <- full_join(sepal.data, petal.data) %>%
mutate(Species = iris$Species)
data("iris")
sepal.data <- data.frame(Length = iris$Sepal.Length, Width = iris$Sepal.Width, Part = "Sepal")
petal.data <- data.frame(Length = iris$Petal.Length, Width = iris$Petal.Width, Part = "Petal")
filtered.iris <- full_join(sepal.data, petal.data) %>%
mutate(Species = iris$Species)
sepal.data <- data.frame(Length = iris$Sepal.Length, Width = iris$Sepal.Width, Part = "Sepal", Species = as.character(iris$Species))
petal.data <- data.frame(Length = iris$Petal.Length, Width = iris$Petal.Width, Part = "Petal", Species = as.character(iris$Species))
filtered.iris <- full_join(sepal.data, petal.data)
View(iris)
runApp('Dropbox/Classes/INFO201/Assignments/a8-data-app-ktran29')
sepal.data <- data.frame(Length = iris$Sepal.Length, Width = iris$Sepal.Width, Part = "Sepal", Species = as.character(iris$Species))
petal.data <- data.frame(Length = iris$Petal.Length, Width = iris$Petal.Width, Part = "Petal", Species = as.character(iris$Species))
shinyServer(function(input, output) {
# reactive function that filters the iris data based on button selections
filter.iris.data <- reactive({
# filters the data based on the length/width range input for either sepals or petals
sepal.data <- sepal.data %>%
filter(Length > input$sepal.length[1] & Length < input$sepal.length[2]) %>%
filter(Width > input$sepal.width[1] & Width < input$sepal.width[2])
petal.data <- petal.data %>%
filter(Length > input$petal.length[1] & Length < input$petal.length[2]) %>%
filter(Width > input$petal.width[1] & Width < input$petal.width[2]) %>%
if(input$part == "sepal") {
return(filter(sepal.data, Species %in% input$species))
} else if (input$part == "petal"){
return(filter(petal.data, Species %in% input$species))
} else {
return(full_join(sepal.data, petal.data) %>% filter(filtered.iris, Species %in% input$species))
}
# filtered.iris <- filter(filtered.iris, Species %in% input$species) # filters data for selected species
})
# renders a table
output$table <- renderTable({
return(filter.iris.data())
})
# reactive values for x and y coordinates
dimensions <- reactiveValues(x = NULL, y = NULL)
# creates a plot with x and y values mapped to iris part length and width
# color is mapped to iris species
output$plot <- renderPlot({
filtered.iris <- filter.iris.data()
iris.plot <- ggplot(filtered.iris, mapping = aes(x = Length, y = Width, color = Species))
if(input$part == "both") {
iris.plot <- iris.plot + facet_by(Part)
}
iris.plot + geom_point(size = 5) +
coord_cartesian(xlim = dimensions$x, ylim = dimensions$y) # plot coordinates change based on reactive values
return(iris.plot)
})
# adds a double click listener
observeEvent(input$dblclick, {
brush <- input$brush
if (!is.null(brush)) { # if a brush exists, changes reactive x and y coordinate values to the box x and y values
dimensions$x <- c(brush$xmin, brush$xmax)
dimensions$y <- c(brush$ymin, brush$ymax)
} else { # otherwise it's back to the plot values
dimensions$x <- NULL
dimensions$y <- NULL
}
})
})
petal.data <- petal.data %>%
filter(Length > input$petal.length[1] & Length < input$petal.length[2]) %>%
filter(Width > input$petal.width[1] & Width < input$petal.width[2]) %>%
if(input$part == "sepal") {
return(filter(sepal.data, Species %in% input$species))
} else if (input$part == "petal"){
return(filter(petal.data, Species %in% input$species))
} else {
return(full_join(sepal.data, petal.data) %>% filter(filtered.iris, Species %in% input$species))
}
output$table <- renderTable({
return(filter.iris.data())
})
runApp('Dropbox/Classes/INFO201/Assignments/a8-data-app-ktran29')
runApp('Dropbox/Classes/INFO201/Assignments/a8-data-app-ktran29')
runApp('Dropbox/Classes/INFO201/Assignments/a8-data-app-ktran29')
runApp('Dropbox/Classes/INFO201/Assignments/a8-data-app-ktran29')
runApp('Dropbox/Classes/INFO201/Assignments/a8-data-app-ktran29')
runApp('Dropbox/Classes/INFO201/Assignments/a8-data-app-ktran29')
runApp('Dropbox/Classes/INFO201/Assignments/a8-data-app-ktran29')
runApp('Dropbox/Classes/INFO201/Assignments/a8-data-app-ktran29')
runApp('Dropbox/Classes/INFO201/Assignments/a8-data-app-ktran29')
runApp('Dropbox/Classes/INFO201/Assignments/a8-data-app-ktran29')
runApp('Dropbox/Classes/INFO201/Assignments/a8-data-app-ktran29')
runApp('Dropbox/Classes/INFO201/Assignments/a8-data-app-ktran29')
runApp('Dropbox/Classes/INFO201/Assignments/a8-data-app-ktran29')
runApp('Dropbox/Classes/INFO201/Assignments/a8-data-app-ktran29')
runApp('Dropbox/Classes/INFO201/Assignments/a8-data-app-ktran29')
runApp('Dropbox/Classes/INFO201/Assignments/a8-data-app-ktran29')
runApp('Dropbox/Classes/INFO201/Assignments/a8-data-app-ktran29')
runApp('Dropbox/Classes/INFO201/Assignments/a8-data-app-ktran29')
runApp('Dropbox/Classes/INFO201/Assignments/a8-data-app-ktran29')
runApp('Dropbox/Classes/INFO201/Assignments/a8-data-app-ktran29')
runApp('Dropbox/Classes/INFO201/Assignments/a8-data-app-ktran29')
runApp('Dropbox/Classes/INFO201/Assignments/a8-data-app-ktran29')
runApp('Dropbox/Classes/INFO201/Assignments/a8-data-app-ktran29')
runApp('Dropbox/Classes/INFO201/Assignments/a8-data-app-ktran29')
runApp('Dropbox/Classes/INFO201/Assignments/a8-data-app-ktran29')
runApp('Dropbox/Classes/INFO201/Assignments/a8-data-app-ktran29')
runApp('Dropbox/Classes/INFO201/Assignments/a8-data-app-ktran29')
runApp('Dropbox/Classes/INFO201/Assignments/a8-data-app-ktran29')
runApp('Dropbox/Classes/INFO201/Assignments/a8-data-app-ktran29')
runApp('Dropbox/Classes/INFO201/Assignments/a8-data-app-ktran29')
?coord_cartesian
runApp('Dropbox/Classes/INFO201/Assignments/a8-data-app-ktran29')
library(rsconnect)
runApp('Dropbox/Classes/INFO201/Assignments/a8-data-app-ktran29')
shiny::runApp('Dropbox/Classes/INFO201/Assignments/a8-data-app-ktran29')
?updateSliderInput
shiny::runApp('Dropbox/Classes/INFO201/Project/final_project')
runApp('Dropbox/Classes/INFO201/Project/final_project')
<<<<<<< HEAD
collision.data <- read.csv("./SDOT_Collisions.csv", stringsAsFactors = FALSE)
setwd("~/Dropbox/Classes/INFO201/Project/final_project")
runApp()
=======
runApp('Dropbox/Classes/INFO201/Project/final_project')
runApp('Dropbox/Classes/INFO201/Project/final_project')
runApp('Dropbox/Classes/INFO201/Project/final_project')
runApp('Dropbox/Classes/INFO201/Project/final_project')
runApp('Dropbox/Classes/INFO201/Project/final_project')
runApp('Dropbox/Classes/INFO201/Project/final_project')
runApp('Dropbox/Classes/INFO201/Project/final_project')
runApp('Dropbox/Classes/INFO201/Project/final_project')
runApp('Dropbox/Classes/INFO201/Project/final_project')
runApp('Dropbox/Classes/INFO201/Project/final_project')
runApp('Dropbox/Classes/INFO201/Project/final_project')
runApp('Dropbox/Classes/INFO201/Project/final_project')
runApp('Dropbox/Classes/INFO201/Project/final_project')
runApp('Dropbox/Classes/INFO201/Project/final_project')
runApp('Dropbox/Classes/INFO201/Project/final_project')
runApp('Dropbox/Classes/INFO201/Project/final_project')
runApp('Dropbox/Classes/INFO201/Project/final_project')
runApp('Dropbox/Classes/INFO201/Project/final_project')
runApp('Dropbox/Classes/INFO201/Project/final_project')
runApp('Dropbox/Classes/INFO201/Project/final_project')
capitol.hill.data %>% filter(INATTETIONIND == "Y")
capitol.hill.data %>% filter(INATTENTIONIND == "Y")
capitol.hill.data %>% filter(INATTENTIONIND == "N")
capitol.hill.data %>% filter(INATTENTIONIND == "Y" & INATTENTIONIND == "N")
View(capitol.hill.data)
capitol.hill.data$INATTENTIONIND
capitol.hill.data %>% filter(INATTENTIONIND == "Y" & INATTENTIONIND == "N")
capitol.hill.data %>% filter(INATTENTIONIND == "Y")
capitol.hill.data %>% filter(INATTENTIONIND == "N")
capitol.hill.data %>% filter(INATTENTIONIND %in% c("Y", "N"))
runApp('Dropbox/Classes/INFO201/Project/final_project')
runApp('Dropbox/Classes/INFO201/Project/final_project')
runApp('Dropbox/Classes/INFO201/Project/final_project')
runApp('Dropbox/Classes/INFO201/Project/final_project')
runApp('Dropbox/Classes/INFO201/Project/final_project')
runApp('Dropbox/Classes/INFO201/Project/final_project')
runApp('Dropbox/Classes/INFO201/Project/final_project')
runApp('Dropbox/Classes/INFO201/Project/final_project')
runApp('Dropbox/Classes/INFO201/Project/final_project')
runApp('Dropbox/Classes/INFO201/Project/final_project')
runApp('Dropbox/Classes/INFO201/Project/final_project')
runApp('Dropbox/Classes/INFO201/Project/final_project')
runApp('Dropbox/Classes/INFO201/Project/final_project')
runApp('Dropbox/Classes/INFO201/Project/final_project')
runApp('Dropbox/Classes/INFO201/Project/final_project')
runApp('Dropbox/Classes/INFO201/Project/final_project')
runApp('Dropbox/Classes/INFO201/Project/final_project')
runApp('Dropbox/Classes/INFO201/Project/final_project')
runApp('Dropbox/Classes/INFO201/Project/final_project')
runApp('Dropbox/Classes/INFO201/Project/final_project')
runApp('Dropbox/Classes/INFO201/Project/final_project')
runApp('Dropbox/Classes/INFO201/Project/final_project')
runApp('Dropbox/Classes/INFO201/Project/final_project')
runApp('Dropbox/Classes/INFO201/Project/final_project')
runApp('Dropbox/Classes/INFO201/Project/final_project')
runApp('Dropbox/Classes/INFO201/Project/final_project')
library(dplyr)
library(ggplot2)
library(plotly)
collision.data <- read.csv("./SDOT_Collisions.csv", stringsAsFactors = FALSE)
collision.data[collision.data==""] <- NA
collision.data$INATTENTIONIND[is.na(collision.data$INATTENTIONIND)] <- "N"
collision.data <- read.csv("./SDOT_Collisions.csv", stringsAsFactors = FALSE)
>>>>>>> comment
setwd("~/Dropbox/Classes/INFO201/Project/final_project")
collision.data <- read.csv("./SDOT_Collisions.csv", stringsAsFactors = FALSE)
collision.data[collision.data==""] <- NA
collision.data$INATTENTIONIND[is.na(collision.data$INATTENTIONIND)] <- "N"
coordinates <- collision.data$Shape
lat <- sapply(strsplit(coordinates, split=", "), "[", 1)
lng <- sapply(strsplit(coordinates, split=", "), "[", 2)
lat <- gsub("\\(", "", lat)
lng <- gsub(")", "", lng)
lat <- signif(as.numeric(lat), 8)
lng <- signif(as.numeric(lng), 8)
date <- collision.data$INCDTTM
time <- sapply(strsplit(date, split=" "), "[", 2)
hour <- sapply(strsplit(time, split=":"), "[", 1)
time.of.day <- sapply(strsplit(date, split=" "), "[", 3)
date <- sapply(strsplit(date, split=" "), "[", 1)
year <- as.numeric(sapply(strsplit(date, split="/"), "[", 3))
collision.data <- mutate(collision.data, "Latitude" = lat, "Longitude" = lng, "YEAR" = year, "DATE" = date,
"TIME" = time, "HOUR" = hour, "TIME_OF_DAY" = time.of.day) %>%
select(FATALITIES, INATTENTIONIND, INJURIES, LIGHTCOND, LOCATION, PERSONCOUNT,
ROADCOND, SDOT_COLDESC, SEVERITYCODE, SEVERITYDESC, WEATHER, Latitude,
Longitude, DATE, YEAR, TIME, HOUR, TIME_OF_DAY)
collision.data <- na.omit(collision.data)
hour <- as.numeric(collision.data$HOUR)
time.of.day <- (collision.data$TIME_OF_DAY)
time <- data.frame(time.of.day, hour, stringsAsFactors = FALSE)
time <- within(time, hour[time.of.day == "PM"] <- hour[time.of.day == "PM"] + 12)
time <- within(time, hour[hour == "24"] <- 0)
hour <- time$hour
minute <- sapply(strsplit(collision.data$TIME, split=":"), "[", 2)
time <- paste0(hour, ":", minute)
collision.data <- mutate(collision.data, "TIME" = time, "HOUR" = hour, "MINUTE" = minute) %>%
filter(YEAR >= 2007)
<<<<<<< HEAD
options(digits=16)
=======
View(collision.data)
runApp()
>>>>>>> comment
ballard.limits <- list(upper.lng = -122.360702, upper.lat = 47.690566, lower.lng = -122.410012, lower.lat = 47.655839)
phinney.ridge.limits <- list(upper.lng = -122.344423, upper.lat = 47.686954, lower.lng = -122.366053, lower.lat = 47.662190)
fremont.limits <- list(upper.lng = -122.342510, upper.lat = 47.665045, lower.lng = -122.367444, lower.lat = 47.648536)
greenwood.limits <- list(upper.lng = -122.344608, upper.lat = 47.705067, lower.lng = -122.365980, lower.lat = 47.683229)
university.district.limits <- list(upper.lng = -122.286484, upper.lat = 47.671793, lower.lng = -122.322104, lower.lat = 47.647687)
green.lake.limits <- list(upper.lng = -122.320072, upper.lat = 47.690502, lower.lng = -122.347323, lower.lat = 47.671085)
maple.leaf.limits <- list(upper.lng = -122.304198, upper.lat = 47.708535, lower.lng = -122.328403, lower.lat = 47.683058)
magnolia.limits <- list(upper.lng = -122.393264, upper.lat = 47.661892, lower.lng = -122.409122, lower.lat = 47.648398)
queen.anne.limits <- list(upper.lng = -122.356687, upper.lat = 47.644524, lower.lng = -122.373650, lower.lat = 47.637816)
capitol.hill.limits <- list(upper.lng = -122.318215, upper.lat = 47.629830, lower.lng = -122.321305, lower.lat = 47.621153)
ballard.data <- collision.data %>%
filter(Longitude < ballard.limits$upper.lng & Longitude > ballard.limits$lower.lng) %>%
filter(Latitude < ballard.limits$upper.lat & Latitude > ballard.limits$lower.lat)
phinney.ridge.data <- collision.data %>%
filter(Longitude < phinney.ridge.limits$upper.lng & Longitude > phinney.ridge.limits$lower.lng) %>%
filter(Latitude < phinney.ridge.limits$upper.lat & Latitude > phinney.ridge.limits$lower.lat)
<<<<<<< HEAD
fremont.data <- collision.data %>%
filter(Longitude < fremont.limits$upper.lng & Longitude > fremont.limits$lower.lng) %>%
filter(Latitude < fremont.limits$upper.lat & Latitude > fremont.limits$lower.lat)
greenwood.data <- collision.data %>%
filter(Longitude < greenwood.limits$upper.lng & Longitude > greenwood.limits$lower.lng) %>%
filter(Latitude < greenwood.limits$upper.lat & Latitude > greenwood.limits$lower.lat)
=======
greenwood.data <- collision.data %>%
filter(Longitude < greenwood.limits$upper.lng & Longitude > greenwood.limits$lower.lng) %>%
filter(Latitude < greenwood.limits$upper.lat & Latitude > greenwood.limits$lower.lat)
fremont.data <- collision.data %>%
filter(Longitude < fremont.limits$upper.lng & Longitude > fremont.limits$lower.lng) %>%
filter(Latitude < fremont.limits$upper.lat & Latitude > fremont.limits$lower.lat)
>>>>>>> comment
university.district.data <- collision.data %>%
filter(Longitude < university.district.limits$upper.lng & Longitude > university.district.limits$lower.lng) %>%
filter(Latitude < university.district.limits$upper.lat & Latitude > university.district.limits$lower.lat)
green.lake.data <- collision.data %>%
filter(Longitude < green.lake.limits$upper.lng & Longitude > green.lake.limits$lower.lng) %>%
filter(Latitude < green.lake.limits$upper.lat & Latitude > green.lake.limits$lower.lat)
maple.leaf.data <- collision.data %>%
filter(Longitude < maple.leaf.limits$upper.lng & Longitude > maple.leaf.limits$lower.lng) %>%
filter(Latitude < maple.leaf.limits$upper.lat & Latitude > maple.leaf.limits$lower.lat)
magnolia.data <- collision.data %>%
filter(Longitude < magnolia.limits$upper.lng & Longitude > magnolia.limits$lower.lng) %>%
filter(Latitude < magnolia.limits$upper.lat & Latitude > magnolia.limits$lower.lat)
queen.anne.data <- collision.data %>%
filter(Longitude < queen.anne.limits$upper.lng & Longitude > queen.anne.limits$lower.lng) %>%
filter(Latitude < queen.anne.limits$upper.lat & Latitude > queen.anne.limits$lower.lat)
capitol.hill.data <- collision.data %>%
filter(Longitude < capitol.hill.limits$upper.lng & Longitude > capitol.hill.limits$lower.lng) %>%
filter(Latitude < capitol.hill.limits$upper.lat & Latitude > capitol.hill.limits$lower.lat)
<<<<<<< HEAD
neighborhood.lng <- c(-122.385, -122.35438, -122.3499, -122.3553, -122.306158, -122.327778,
-122.316873, -122.400833, -122.356944, -122.316456)
neighborhood.lat <- c(47.677, 47.672139, 47.6505, 47.690612, 47.661427, 47.680278,
47.695833, 47.650556, 47.637222, 47.622942)
neighborhood <- c("Ballard", "Phinney Ridge", "Fremont", "Greenwood", "University District", "Green Lake",
"Maple Leaf", "Magnolia", "Queen Anne", "Capitol Hill")
count <- c(nrow(ballard.data), nrow(phinney.ridge.data), nrow(fremont.data), nrow(greenwood.data),
nrow(university.district.data), nrow(green.lake.data), nrow(maple.leaf.data), nrow(magnolia.data),
nrow(queen.anne.data), nrow(capitol.hill.data))
neighborhood.data <- data.frame(neighborhood, count)
runApp()
runApp('~/Dropbox/Classes/INFO201/Assignments/a8-data-app-ktran29')
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
source('./data.R')
print(a)
print(a.data)
a.data
print(is.na(a.data))
runApp()
runApp()
runApp()
source('./data.R')
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
write.csv(collision.data, "AlteredData.csv")
runApp()
runApp()
runApp()
runApp()
runApp()
write.csv(collision.data, "Filtered_SDOT_Collisions.csv")
collision.data <- read.csv("./Filtered_SDOT_Collisions.csv", stringsAsFactors = FALSE)
runApp()
runApp()
runApp()
runApp()
runApp()
neighborhood.count <- c(nrow(ballard.data), nrow(phinney.ridge.data), nrow(fremont.data), nrow(greenwood.data),
nrow(university.district.data), nrow(green.lake.data), nrow(maple.leaf.data), nrow(magnolia.data),
nrow(queen.anne.data), nrow(capitol.hill.data))
runApp()
neighborhood.data <- data.frame(lng, lat, name, count)
lng <- c(-122.385, -122.35438, -122.3499, -122.3553, -122.306158, -122.327778,
-122.316873, -122.400833, -122.356944, -122.316456)
lat <- c(47.677, 47.672139, 47.6505, 47.690612, 47.661427, 47.680278,
47.695833, 47.650556, 47.637222, 47.622942)
name <- c("Ballard", "Phinney Ridge", "Fremont", "Greenwood", "University District", "Green Lake",
"Maple Leaf", "Magnolia", "Queen Anne", "Capitol Hill")
count <- c(nrow(ballard.data), nrow(phinney.ridge.data), nrow(fremont.data), nrow(greenwood.data),
nrow(university.district.data), nrow(green.lake.data), nrow(maple.leaf.data), nrow(magnolia.data),
nrow(queen.anne.data), nrow(capitol.hill.data))
neighborhood.data <- data.frame(lng, lat, name, count)
View(neighborhood.data)
map <- leaflet() %>%
addTiles() %>%
addCircles(neighborhood.lng, neighborhood.lat,
c(computeDiameter(nrow(ballard.disp())), computeDiameter(nrow(phinney.ridge.disp())),
computeDiameter(nrow(fremont.disp())), computeDiameter(nrow(greenwood.disp())),
computeDiameter(nrow(university.district.disp())), computeDiameter(nrow(green.lake.disp())),
computeDiameter(nrow(maple.leaf.disp())), computeDiameter(nrow(magnolia.disp())),
computeDiameter(nrow(queen.anne.disp())), computeDiameter(nrow(capitol.hill.disp()))),
neighborhood, "Overview", FALSE, fillOpacity = 0.5, label = count,
labelOptions = labelOptions(noHide = T)) %>%
setView(-122.340098, 47.665702, 12)
runApp()
runApp()
runApp()
runApp()
neighborhood.count <- c(nrow(ballard.disp()), nrow(phinney.ridge.disp()), nrow(fremont.disp()), nrow(greenwood.disp()), nrow(university.district.disp()), nrow(green.lake.disp()), nrow(maple.leaf.disp()), nrow(magnolia.disp()), nrow(queen.anne.disp()), nrow(capitol.hill.disp()))
neighborhood.count <- c(nrow(ballard.disp()), nrow(phinney.ridge.disp()), nrow(fremont.disp()), nrow(greenwood.disp()), nrow(university.district.disp()), nrow(green.lake.disp()), nrow(maple.leaf.disp()), nrow(magnolia.disp()), nrow(queen.anne.disp()), nrow(capitol.hill.disp()))
neighborhood.count <- c(computeDiameter(nrow(ballard.disp())), computeDiameter(nrow(phinney.ridge.disp())),
computeDiameter(nrow(fremont.disp())), computeDiameter(nrow(greenwood.disp())),
computeDiameter(nrow(university.district.disp())), computeDiameter(nrow(green.lake.disp())),
computeDiameter(nrow(maple.leaf.disp())), computeDiameter(nrow(magnolia.disp())),
computeDiameter(nrow(queen.anne.disp())), computeDiameter(nrow(capitol.hill.disp())))
runApp()
runApp()
a <- nrow(ballard.disp())
a <- nrow(ballard.disp())
a <- nrow(ballard.disp())
map <- leaflet() %>%
addTiles() %>%
addCircles(neighborhood.lng, neighborhood.lat,
c(computeDiameter(nrow(ballard.disp())), computeDiameter(nrow(phinney.ridge.disp())),
computeDiameter(nrow(fremont.disp())), computeDiameter(nrow(greenwood.disp())),
computeDiameter(nrow(university.district.disp())), computeDiameter(nrow(green.lake.disp())),
computeDiameter(nrow(maple.leaf.disp())), computeDiameter(nrow(magnolia.disp())),
computeDiameter(nrow(queen.anne.disp())), computeDiameter(nrow(capitol.hill.disp()))),
neighborhood, "Overview", FALSE, fillOpacity = 0.5, label = paste("Number of collisions: ",
c(nrow(ballard.disp()), nrow(phinney.ridge.disp()),
nrow(fremont.disp()), nrow(greenwood.disp()),
nrow(university.district.disp()), nrow(green.lake.disp()),
nrow(maple.leaf.disp()), nrow(magnolia.disp()),
nrow(queen.anne.disp()), nrow(capitol.hill.disp()))),
labelOptions = labelOptions(noHide = T)) %>%
setView(-122.340098, 47.665702, 12)
output$map <- renderLeaflet({
a <- nrow(ballard.disp())
map <- leaflet() %>%
addTiles() %>%
addCircles(neighborhood.lng, neighborhood.lat,
c(computeDiameter(nrow(ballard.disp())), computeDiameter(nrow(phinney.ridge.disp())),
computeDiameter(nrow(fremont.disp())), computeDiameter(nrow(greenwood.disp())),
computeDiameter(nrow(university.district.disp())), computeDiameter(nrow(green.lake.disp())),
computeDiameter(nrow(maple.leaf.disp())), computeDiameter(nrow(magnolia.disp())),
computeDiameter(nrow(queen.anne.disp())), computeDiameter(nrow(capitol.hill.disp()))),
neighborhood, "Overview", FALSE, fillOpacity = 0.5, label = paste("Number of collisions: ",
c(nrow(ballard.disp()), nrow(phinney.ridge.disp()),
nrow(fremont.disp()), nrow(greenwood.disp()),
nrow(university.district.disp()), nrow(green.lake.disp()),
nrow(maple.leaf.disp()), nrow(magnolia.disp()),
nrow(queen.anne.disp()), nrow(capitol.hill.disp()))),
labelOptions = labelOptions(noHide = T)) %>%
setView(-122.340098, 47.665702, 12)
current.group <- "placeholder"
if(!is.null(clicks$map.click) & is.null(clicks$shape.click)) {
removeMarker(map, current.group)
map <- map %>% showGroup("Overview") %>%
setView(-122.340098, 47.665702, 12)
} else if(!is.null(clicks$shape.click) & is.null(clicks$map.click)) {
current.group <- clicks$shape.click$id
data.res <- eval(parse(text = paste0(gsub(" ", ".", tolower(current.group)), ".disp()")))
map <- map %>% hideGroup("Overview") %>% addCircleMarkers(~Longitude, ~Latitude, 4, NULL, current.group, FALSE, data = data.res, fillOpacity = 0.3) %>%
setView(lat = clicks$shape.click$lat, lng = clicks$shape.click$lng, zoom = 14) %>% showGroup(current.group)
}
return(map)
})
output$plot <- renderPlotly({
p <- ggplot(data = collision.data, aes_string(x = input$conditions, fill = "SEVERITYCODE")) +
geom_bar() +
labs(title = "How Many Collisions and Their Severity for Certain Conditions",
x = if(input$conditions == "ROADCOND") {"Road Conditions"} else if(input$conditions == "WEATHER"){"Weather"}
else {"Light Conditions"},
y = "Number of Collisions")
p <- plotly_build(p)
return(p)
})
fremont.disp <- reactive({return(eval(parse(text = filt("fremont"))))})
phinney.ridge.disp <- reactive({return(eval(parse(text = filt("phinney.ridge"))))})
ballard.disp <- reactive({return(eval(parse(text = filt("ballard"))))})
greenwood.disp <- reactive({return(eval(parse(text = filt("greenwood"))))})
university.district.disp <- reactive({return(eval(parse(text = filt("university.district"))))})
green.lake.disp <- reactive({return(eval(parse(text = filt("green.lake"))))})
queen.anne.disp <- reactive({return(eval(parse(text = filt("queen.anne"))))})
magnolia.disp <- reactive({return(eval(parse(text = filt("magnolia"))))})
maple.leaf.disp <- reactive({return(eval(parse(text = filt("maple.leaf"))))})
capitol.hill.disp <- reactive({return(eval(parse(text = filt("capitol.hill"))))})
filt <- function(city){
str <- sprintf("%s.data", city)
str <- paste(str, "%>%", "filter(TRUE")
str <- paste(str, "& YEAR >= input$year.slider[1] & YEAR <= input$year.slider[2]")
str <- paste(str, "& HOUR >= input$hour.slider[1] & HOUR <= input$hour.slider[2]")
if(!is.null(input$inattention)) {
str <- paste(str, "& INATTENTIONIND %in% input$inattention")
}
if(input$weather != "All"){str <- paste(str, "& WEATHER == input$weather")}
if(input$roadcond != "All"){str <- paste(str, "& ROADCOND == input$roadcond")}
if(input$lightcond != "All"){str <- paste(str, "& LIGHTCOND == input$lightcond")}
str <- paste0(str, ")")
return(str)
}
computeDiameter <- function(area){ return(sqrt(area/pi)*2*13) }
clicks <- reactiveValues(map.click = NULL, shape.click = NULL)
observeEvent(input$map_shape_click, {
clicks$shape.click <- input$map_shape_click
clicks$map.click <- NULL
})
observeEvent(input$map_click, {
clicks$map.click <- input$map_click
clicks$shape.click <- NULL
})
showCollisionInfo <- function(collision, lat, lng) {
selectedCollisions <- filter(collision.data, Latitude == lat, Longitude == lng)
selectedCollision <- sample_n(selectedCollisions, 1)
content <- as.character(tagList(
tags$h4("Location: ", selectedCollision$LOCATION),
tags$h5("Number of collisions at this location: ", tags$em(nrow(selectedCollisions))),
tags$strong(sprintf("Collision on %1$s at %2$s:", selectedCollision$DATE, selectedCollision$TIME)), tags$br(),
tags$strong("Description: "), tags$em(selectedCollision$SDOT_COLDESC), tags$br(),
tags$strong("People involved: "), tags$em(selectedCollision$PERSONCOUNT), tags$br(),
tags$strong("Injuries: "), tags$em(selectedCollision$INJURIES), tags$br(),
tags$strong("Fatalities: "), tags$em(selectedCollision$FATALITIES)
))
leafletProxy("map") %>% addPopups(lng, lat, content)
}
a <- nrow(ballard.disp())
runApp()
runApp()
=======
neighborhood.lat <- c(47.677, 47.672139, 47.6505, 47.690612, 47.661427, 47.680278,
47.695833, 47.650556, 47.637222, 47.622942)
neighborhood.lng <- c(-122.385, -122.35438, -122.3499, -122.3553, -122.306158, -122.327778,
-122.316873, -122.400833, -122.356944, -122.316456)
neighborhood <- c("Ballard", "Phinney Ridge", "Fremont", "Greenwood", "University District", "Green Lake",
"Maple Leaf", "Magnolia", "Queen Anne", "Capitol Hill")
neighborhood.data <- data.frame(neighborhood, count)
count <- c(nrow(ballard.data), nrow(phinney.ridge.data), nrow(fremont.data), nrow(greenwood.data),
nrow(university.district.data), nrow(green.lake.data), nrow(maple.leaf.data), nrow(magnolia.data),
nrow(queen.anne.data), nrow(capitol.hill.data))
neighborhood.data <- data.frame(neighborhood, count)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
?range
range(collision.data$TIME)
range(collision.data$HOUR)
>>>>>>> comment
runApp()
