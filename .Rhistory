),
conditionalPanel( # panel that only displays if the 'petal' radio button is selected
condition = "input.part == 'petal'",
sliderInput("petal.length", # slider input for petal length
"Petal Length:",
petal.length.range[1],
petal.length.range[2],
petal.length.range),
sliderInput("petal.width", # slider input for petal length
"Petal Width:",
petal.width.range[1],
petal.width.range[2],
petal.width.range)
)
),
mainPanel(
tabsetPanel(type = "tabs",
tabPanel("Table", tableOutput("table")),
tabPanel("Plot", plotOutput("plot",
brush = "brush", # adds brush input
dblclick = "dblclick")) # adds double click input
)
)
)
))
sepal.data <- data.frame(Length = iris$Sepal.Length, Width = iris$Sepal.Width, Part = "Sepal", Species = as.character(iris$Species))
petal.data <- data.frame(Length = iris$Petal.Length, Width = iris$Petal.Width, Part = "Petal", Species = lapply(iris$Species, as.character)
filtered.iris <- iris %>% left_join(sepal.data, petal.data)
# creates a shiny server
shinyServer(function(input, output) {
# reactive function that filters the iris data based on button selections
filter.iris.data <- reactive({
if(input$part == "both") {
filtered.iris <- iris %>%
filter(Sepal.Length > input$sepal.length[1] & Sepal.Length < input$sepal.length[2]) %>%
filter(Sepal.Width > input$sepal.width[1] & Sepal.Width < input$sepal.width[2]) %>%
filter(Petal.Length > input$petal.length[1] & Petal.Length < input$petal.length[2]) %>%
filter(Petal.Width > input$petal.width[1] & Petal.Width < input$petal.width[2])
colnames(filtered.iris) <- c("Sepal Length", "Sepal Width", "Petal Length", "Petal Width", "Species")
} else {
# filters the data based on the length/width range input for either sepals or petals
if(input$part == "sepal") { # selects only sepal data if sepal button is selected
filtered.iris <- select(iris, Sepal.Length, Sepal.Width, Species) %>%
filter(Sepal.Length > input$sepal.length[1] & Sepal.Length < input$sepal.length[2]) %>%
filter(Sepal.Width > input$sepal.width[1] & Sepal.Width < input$sepal.width[2])
} else { # selects only petal data if petal button is selected
filtered.iris <- select(iris, Species, Petal.Length, Petal.Width) %>%
filter(Petal.Length > input$petal.length[1] & Petal.Length < input$petal.length[2]) %>%
filter(Petal.Width > input$petal.width[1] & Petal.Width < input$petal.width[2])
}
colnames(filtered.iris) <- c("Length", "Width", "Species") # changes column names to be more readable
# and universal
}
filtered.iris <- filter(filtered.iris, Species %in% input$species) # filters data for selected species
return(filtered.iris)
})
# renders a table
output$table <- renderTable({
return(filter.iris.data())
})
# reactive values for x and y coordinates
dimensions <- reactiveValues(x = NULL, y = NULL)
# creates a plot with x and y values mapped to iris part length and width
# color is mapped to iris species
output$plot <- renderPlot({
filtered.iris <- filter.iris.data()
if(input$part == "both") {
iris.plot <- ggplot
} else {
iris.plot <- ggplot(filtered.iris, mapping = aes(x = Length, y = Width, color = Species))
}
iris.plot + geom_point(size = 5) +
coord_cartesian(xlim = dimensions$x, ylim = dimensions$y) # plot coordinates change based on reactive values
return(iris.plot)
})
# adds a double click listener
observeEvent(input$dblclick, {
brush <- input$brush
if (!is.null(brush)) { # if a brush exists, changes reactive x and y coordinate values to the box x and y values
dimensions$x <- c(brush$xmin, brush$xmax)
dimensions$y <- c(brush$ymin, brush$ymax)
} else { # otherwise it's back to the plot values
dimensions$x <- NULL
dimensions$y <- NULL
}
})
})
sepal.data <- data.frame(Length = iris$Sepal.Length, Width = iris$Sepal.Width, Part = "Sepal", Species = lapply(iris$Species, as.character))
Species
petal.data <- data.frame(Length = iris$Petal.Length, Width = iris$Petal.Width, Part = "Petal", Species = lapply(iris$Species, as.character))
sepal.data <- data.frame(Length = iris$Sepal.Length, Width = iris$Sepal.Width, Part = "Sepal", Species = as.character(iris$Species), stringsAsFactors = FALSE)
petal.data <- data.frame(Length = iris$Petal.Length, Width = iris$Petal.Width, Part = "Petal", Species = as.character(iris$Species), stringsAsFactors = FALSE)
filtered.iris <- iris %>% full_join(sepal.data, petal.data)
sepal.data <- data.frame(length = iris$Sepal.Length, width = iris$Sepal.Width, part = "Sepal", species = as.character(iris$Species), stringsAsFactors = FALSE)
petal.data <- data.frame(length = iris$Petal.Length, width = iris$Petal.Width, part = "Petal", species = as.character(iris$Species), stringsAsFactors = FALSE)
filtered.iris <- iris %>% full_join(sepal.data, petal.data)
typeof(sepal.data)
sepal.data <- as.data.frame(length = iris$Sepal.Length, width = iris$Sepal.Width, part = "Sepal", species = as.character(iris$Species), stringsAsFactors = FALSE)
typeof(iris)
is.data.frame(iris)
is.data.frame(sepal.data)
filtered.iris <- full_join(sepal.data, petal.data)
sepal.data <- data.frame(Length = iris$Sepal.Length, Width = iris$Sepal.Width, Part = "Sepal", Species = as.character(iris$Species), stringsAsFactors = FALSE)
petal.data <- data.frame(Length = iris$Petal.Length, Width = iris$Petal.Width, Part = "Petal", Species = as.character(iris$Species), stringsAsFactors = FALSE)
filtered.iris <- full_join(sepal.data, petal.data)
View(filtered.iris)
View(filtered.iris)
sepal.data <- data.frame(Length = iris$Sepal.Length, Width = iris$Sepal.Width, Species = as.character(iris$Species), Part = "Sepal")
petal.data <- data.frame(Length = iris$Petal.Length, Width = iris$Petal.Width, Species = as.character(iris$Species), Part = "Petal")
filtered.iris <- full_join(sepal.data, petal.data)
filtered.iris <- full_join(sepal.data, petal.data) %>%
mutate(Species = iris$Species)
data("iris")
sepal.data <- data.frame(Length = iris$Sepal.Length, Width = iris$Sepal.Width, Part = "Sepal")
petal.data <- data.frame(Length = iris$Petal.Length, Width = iris$Petal.Width, Part = "Petal")
filtered.iris <- full_join(sepal.data, petal.data) %>%
mutate(Species = iris$Species)
sepal.data <- data.frame(Length = iris$Sepal.Length, Width = iris$Sepal.Width, Part = "Sepal", Species = as.character(iris$Species))
petal.data <- data.frame(Length = iris$Petal.Length, Width = iris$Petal.Width, Part = "Petal", Species = as.character(iris$Species))
filtered.iris <- full_join(sepal.data, petal.data)
View(iris)
runApp('Dropbox/Classes/INFO201/Assignments/a8-data-app-ktran29')
sepal.data <- data.frame(Length = iris$Sepal.Length, Width = iris$Sepal.Width, Part = "Sepal", Species = as.character(iris$Species))
petal.data <- data.frame(Length = iris$Petal.Length, Width = iris$Petal.Width, Part = "Petal", Species = as.character(iris$Species))
shinyServer(function(input, output) {
# reactive function that filters the iris data based on button selections
filter.iris.data <- reactive({
# filters the data based on the length/width range input for either sepals or petals
sepal.data <- sepal.data %>%
filter(Length > input$sepal.length[1] & Length < input$sepal.length[2]) %>%
filter(Width > input$sepal.width[1] & Width < input$sepal.width[2])
petal.data <- petal.data %>%
filter(Length > input$petal.length[1] & Length < input$petal.length[2]) %>%
filter(Width > input$petal.width[1] & Width < input$petal.width[2]) %>%
if(input$part == "sepal") {
return(filter(sepal.data, Species %in% input$species))
} else if (input$part == "petal"){
return(filter(petal.data, Species %in% input$species))
} else {
return(full_join(sepal.data, petal.data) %>% filter(filtered.iris, Species %in% input$species))
}
# filtered.iris <- filter(filtered.iris, Species %in% input$species) # filters data for selected species
})
# renders a table
output$table <- renderTable({
return(filter.iris.data())
})
# reactive values for x and y coordinates
dimensions <- reactiveValues(x = NULL, y = NULL)
# creates a plot with x and y values mapped to iris part length and width
# color is mapped to iris species
output$plot <- renderPlot({
filtered.iris <- filter.iris.data()
iris.plot <- ggplot(filtered.iris, mapping = aes(x = Length, y = Width, color = Species))
if(input$part == "both") {
iris.plot <- iris.plot + facet_by(Part)
}
iris.plot + geom_point(size = 5) +
coord_cartesian(xlim = dimensions$x, ylim = dimensions$y) # plot coordinates change based on reactive values
return(iris.plot)
})
# adds a double click listener
observeEvent(input$dblclick, {
brush <- input$brush
if (!is.null(brush)) { # if a brush exists, changes reactive x and y coordinate values to the box x and y values
dimensions$x <- c(brush$xmin, brush$xmax)
dimensions$y <- c(brush$ymin, brush$ymax)
} else { # otherwise it's back to the plot values
dimensions$x <- NULL
dimensions$y <- NULL
}
})
})
petal.data <- petal.data %>%
filter(Length > input$petal.length[1] & Length < input$petal.length[2]) %>%
filter(Width > input$petal.width[1] & Width < input$petal.width[2]) %>%
if(input$part == "sepal") {
return(filter(sepal.data, Species %in% input$species))
} else if (input$part == "petal"){
return(filter(petal.data, Species %in% input$species))
} else {
return(full_join(sepal.data, petal.data) %>% filter(filtered.iris, Species %in% input$species))
}
output$table <- renderTable({
return(filter.iris.data())
})
runApp('Dropbox/Classes/INFO201/Assignments/a8-data-app-ktran29')
runApp('Dropbox/Classes/INFO201/Assignments/a8-data-app-ktran29')
runApp('Dropbox/Classes/INFO201/Assignments/a8-data-app-ktran29')
runApp('Dropbox/Classes/INFO201/Assignments/a8-data-app-ktran29')
runApp('Dropbox/Classes/INFO201/Assignments/a8-data-app-ktran29')
runApp('Dropbox/Classes/INFO201/Assignments/a8-data-app-ktran29')
runApp('Dropbox/Classes/INFO201/Assignments/a8-data-app-ktran29')
runApp('Dropbox/Classes/INFO201/Assignments/a8-data-app-ktran29')
runApp('Dropbox/Classes/INFO201/Assignments/a8-data-app-ktran29')
runApp('Dropbox/Classes/INFO201/Assignments/a8-data-app-ktran29')
runApp('Dropbox/Classes/INFO201/Assignments/a8-data-app-ktran29')
runApp('Dropbox/Classes/INFO201/Assignments/a8-data-app-ktran29')
runApp('Dropbox/Classes/INFO201/Assignments/a8-data-app-ktran29')
runApp('Dropbox/Classes/INFO201/Assignments/a8-data-app-ktran29')
runApp('Dropbox/Classes/INFO201/Assignments/a8-data-app-ktran29')
runApp('Dropbox/Classes/INFO201/Assignments/a8-data-app-ktran29')
runApp('Dropbox/Classes/INFO201/Assignments/a8-data-app-ktran29')
runApp('Dropbox/Classes/INFO201/Assignments/a8-data-app-ktran29')
runApp('Dropbox/Classes/INFO201/Assignments/a8-data-app-ktran29')
runApp('Dropbox/Classes/INFO201/Assignments/a8-data-app-ktran29')
runApp('Dropbox/Classes/INFO201/Assignments/a8-data-app-ktran29')
runApp('Dropbox/Classes/INFO201/Assignments/a8-data-app-ktran29')
runApp('Dropbox/Classes/INFO201/Assignments/a8-data-app-ktran29')
runApp('Dropbox/Classes/INFO201/Assignments/a8-data-app-ktran29')
runApp('Dropbox/Classes/INFO201/Assignments/a8-data-app-ktran29')
runApp('Dropbox/Classes/INFO201/Assignments/a8-data-app-ktran29')
runApp('Dropbox/Classes/INFO201/Assignments/a8-data-app-ktran29')
runApp('Dropbox/Classes/INFO201/Assignments/a8-data-app-ktran29')
runApp('Dropbox/Classes/INFO201/Assignments/a8-data-app-ktran29')
runApp('Dropbox/Classes/INFO201/Assignments/a8-data-app-ktran29')
?coord_cartesian
runApp('Dropbox/Classes/INFO201/Assignments/a8-data-app-ktran29')
library(rsconnect)
runApp('Dropbox/Classes/INFO201/Assignments/a8-data-app-ktran29')
shiny::runApp('Dropbox/Classes/INFO201/Assignments/a8-data-app-ktran29')
?updateSliderInput
shiny::runApp('Dropbox/Classes/INFO201/Project/final_project')
runApp('Dropbox/Classes/INFO201/Project/final_project')
runApp('Dropbox/Classes/INFO201/Project/final_project')
runApp('Dropbox/Classes/INFO201/Project/final_project')
runApp('Dropbox/Classes/INFO201/Project/final_project')
runApp('Dropbox/Classes/INFO201/Project/final_project')
runApp('Dropbox/Classes/INFO201/Project/final_project')
runApp('Dropbox/Classes/INFO201/Project/final_project')
runApp('Dropbox/Classes/INFO201/Project/final_project')
runApp('Dropbox/Classes/INFO201/Project/final_project')
runApp('Dropbox/Classes/INFO201/Project/final_project')
runApp('Dropbox/Classes/INFO201/Project/final_project')
runApp('Dropbox/Classes/INFO201/Project/final_project')
runApp('Dropbox/Classes/INFO201/Project/final_project')
runApp('Dropbox/Classes/INFO201/Project/final_project')
runApp('Dropbox/Classes/INFO201/Project/final_project')
runApp('Dropbox/Classes/INFO201/Project/final_project')
?fluidPage
runApp('Dropbox/Classes/INFO201/Project/final_project')
runApp('Dropbox/Classes/INFO201/Project/final_project')
runApp('Dropbox/Classes/INFO201/Project/final_project')
collision.data <- read.csv("./SDOT_Collisions.csv", stringsAsFactors = FALSE)
setwd("~/Dropbox/Classes/INFO201/Project/final_project")
collision.data <- read.csv("./SDOT_Collisions.csv", stringsAsFactors = FALSE)
collision.data[collision.data==""] <- NA
coordinates <- collision.data$Shape
lat <- sapply(strsplit(coordinates, split=", "), "[", 1)
lng <- sapply(strsplit(coordinates, split=", "), "[", 2)
lat <- gsub("\\(", "", lat)
lng <- gsub(")", "", lng)
collision.data <- mutate(collision.data, "Latitude" = as.numeric(lat), "Longitude" = as.numeric(lng)) %>%
select(ADDRTYPE, COLLISIONTYPE, DISTANCE, INATTENTIONIND, INCDTTM, INJURIES, JUNCTIONTYPE,
LIGHTCOND, LOCATION, PERSONCOUNT, ROADCOND, SDOT_COLDESC, SEVERITYDESC, ST_COLDESC,
VEHCOUNT, WEATHER, Latitude, Longitude)
collision.data <- collision.data[complete.cases(collision.data["Latitude"]),]
collision.data <- collision.data[complete.cases(collision.data["Longitude"]),]
collision.data <- collision.data[complete.cases(collision.data["COLLISIONTYPE"]),]
collision.data <- read.csv("./SDOT_Collisions.csv", stringsAsFactors = FALSE)
collision.data[collision.data==""] <- NA
coordinates <- collision.data$Shape
lat <- sapply(strsplit(coordinates, split=", "), "[", 1)
lng <- sapply(strsplit(coordinates, split=", "), "[", 2)
lat <- gsub("\\(", "", lat)
lng <- gsub(")", "", lng)
collision.data <- mutate(collision.data, "Latitude" = as.numeric(lat), "Longitude" = as.numeric(lng)) %>%
select(ADDRTYPE, COLLISIONTYPE, DISTANCE, INATTENTIONIND, INCDTTM, INJURIES, JUNCTIONTYPE,
LIGHTCOND, LOCATION, PERSONCOUNT, ROADCOND, SDOT_COLDESC, SEVERITYDESC, ST_COLDESC,
VEHCOUNT, WEATHER, Latitude, Longitude)
collision.data <- collision.data[complete.cases(collision.data["Latitude"]),]
collision.data <- collision.data[complete.cases(collision.data["Longitude"]),]
collision.data <- collision.data[complete.cases(collision.data["COLLISIONTYPE"]),]
collision.data <- mutate(collision.data, "Latitude" = as.numeric(lat), "Longitude" = as.numeric(lng)) %>%
select(ADDRTYPE, COLLISIONTYPE, DISTANCE, INATTENTIONIND, INCDTTM, INJURIES, JUNCTIONTYPE,
LIGHTCOND, LOCATION, PERSONCOUNT, ROADCOND, SDOT_COLDESC, SEVERITYDESC, ST_COLDESC,
VEHCOUNT, WEATHER, Latitude, Longitude)
collision.data <- read.csv("./SDOT_Collisions.csv", stringsAsFactors = FALSE)
collision.data[collision.data==""] <- NA
coordinates <- collision.data$Shape
lat <- sapply(strsplit(coordinates, split=", "), "[", 1)
lng <- sapply(strsplit(coordinates, split=", "), "[", 2)
lat <- gsub("\\(", "", lat)
lng <- gsub(")", "", lng)
collision.data <- mutate(collision.data, "Latitude" = as.numeric(lat), "Longitude" = as.numeric(lng)) %>%
select(ADDRTYPE, COLLISIONTYPE, DISTANCE, INATTENTIONIND, INCDTTM, INJURIES, JUNCTIONTYPE,
LIGHTCOND, LOCATION, PERSONCOUNT, ROADCOND, SDOT_COLDESC, SEVERITYDESC, ST_COLDESC,
VEHCOUNT, WEATHER, Latitude, Longitude)
test <- na.omit(collision.data)
View(test)
collision.data <- collision.data[complete.cases(collision.data["Latitude"]),]
collision.data <- collision.data[complete.cases(collision.data["Longitude"]),]
collision.data <- collision.data[complete.cases(collision.data["COLLISIONTYPE"]),]
collision.data <- collision.data[complete.cases(collision.data["LIGHTCOND"]),]
collision.data <- collision.data[complete.cases(collision.data["ROADCOND"]),]
collision.data <- collision.data[complete.cases(collision.data["WEATHER"]),]
collision.data <- collision.data[complete.cases(collision.data["PERSONCOUNT"]),]
collision.data <- collision.data[complete.cases(collision.data["SDOT_COLDESC"]),]
collision.data <- collision.data[complete.cases(collision.data["SEVERITYDESC"]),]
collision.data <- collision.data[complete.cases(collision.data["ST_COLDESC"]),]
collision.data <- collision.data[complete.cases(collision.data["VEHCOUNT"]),]
collision.data <- collision.data[complete.cases(collision.data["LOCATION"]),]
collision.data <- collision.data[complete.cases(collision.data["INJURIES"]),]
collision.data <- collision.data[complete.cases(collision.data["DISTANCE"]),]
collision.data <- collision.data[complete.cases(collision.data["INATTENTIONIND"]),]
collision.data[collision.data$INATTENTIONIND == NA]
collision.data[collision.data$INATTENTIONIND == "Y"]
collision.data <- read.csv("./SDOT_Collisions.csv", stringsAsFactors = FALSE)
collision.data[collision.data==""] <- NA
coordinates <- collision.data$Shape
lat <- sapply(strsplit(coordinates, split=", "), "[", 1)
lng <- sapply(strsplit(coordinates, split=", "), "[", 2)
lat <- gsub("\\(", "", lat)
lng <- gsub(")", "", lng)
collision.data <- mutate(collision.data, "Latitude" = as.numeric(lat), "Longitude" = as.numeric(lng)) %>%
select(ADDRTYPE, COLLISIONTYPE, DISTANCE, INATTENTIONIND, INCDTTM, INJURIES, JUNCTIONTYPE,
LIGHTCOND, LOCATION, PERSONCOUNT, ROADCOND, SDOT_COLDESC, SEVERITYDESC, ST_COLDESC,
VEHCOUNT, WEATHER, Latitude, Longitude)
collision.data[is.na(collision.data$INATTENTIONIND)] <- "N"
collision.data[is.na(collision.data$INATTENTIONIND)] <- "N"
collision.data[is.na(collision.data$INATTENTIONIND),] <- "N"
collision.data <- read.csv("./SDOT_Collisions.csv", stringsAsFactors = FALSE)
collision.data[collision.data==""] <- NA
coordinates <- collision.data$Shape
lat <- sapply(strsplit(coordinates, split=", "), "[", 1)
lng <- sapply(strsplit(coordinates, split=", "), "[", 2)
lat <- gsub("\\(", "", lat)
lng <- gsub(")", "", lng)
collision.data <- mutate(collision.data, "Latitude" = as.numeric(lat), "Longitude" = as.numeric(lng)) %>%
select(ADDRTYPE, COLLISIONTYPE, DISTANCE, INATTENTIONIND, INCDTTM, INJURIES, JUNCTIONTYPE,
LIGHTCOND, LOCATION, PERSONCOUNT, ROADCOND, SDOT_COLDESC, SEVERITYDESC, ST_COLDESC,
VEHCOUNT, WEATHER, Latitude, Longitude)
collision.data[,is.na(collision.data$INATTENTIONIND)] <- "N"
collision.data$INATTENTIONIND[is.na(collision.data$INATTENTIONIND)] <- "N"
na.omit(collision.data)
collision.data <- na.omit(collision.data)
runApp('~/Dropbox/Classes/INFO201/Assignments/a8-data-app-ktran29')
checkboxGroupInput("inattention",
"Inattentive Driving",
?checkboxGroupInput
),
mainPanel(
tabsetPanel(type = "tabs",
tabPanel("Map", leafletOutput("map"))
)
)
checkboxGroupInput("inattention",
"Inattentive Driving",
?checkboxGroupInput
),
mainPanel(
tabsetPanel(type = "tabs",
tabPanel("Map", leafletOutput("map"))
)
)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
collision.data <- read.csv("./SDOT_Collisions.csv", stringsAsFactors = FALSE)
collision.data[collision.data==""] <- NA
coordinates <- collision.data$Shape
lat <- sapply(strsplit(coordinates, split=", "), "[", 1)
lng <- sapply(strsplit(coordinates, split=", "), "[", 2)
lat <- gsub("\\(", "", lat)
lng <- gsub(")", "", lng)
collision.data <- mutate(collision.data, "Latitude" = as.numeric(lat), "Longitude" = as.numeric(lng)) %>%
select(ADDRTYPE, COLLISIONTYPE, DISTANCE, INATTENTIONIND, INCDTTM, INJURIES, JUNCTIONTYPE,
LIGHTCOND, LOCATION, PERSONCOUNT, ROADCOND, SDOT_COLDESC, SEVERITYDESC, ST_COLDESC,
VEHCOUNT, WEATHER, Latitude, Longitude)
collision.data$INATTENTIONIND[is.na(collision.data$INATTENTIONIND)] <- "N"
collision.data <- na.omit(collision.data)
runApp()
?leafletProxy
?isolate
runApp()
runApp()
runApp()
(filter(collision.data, Latitude == 47.71551))
runApp()
?filter
filter(collision.data, Latitude == "47.60708")
filter(collision.data, Latitude == 47.60708)
filter(collision.data, SEVERITYDESC == "Injury Collision")
filter(collision.data, Latitude == 47.61680)
?leafletProxy
filter(collision.data, Latitude == as.numeric(47.61680))
collision.data$Latitude
typeof(collision.data$Latitude)
typeof(collision.data$Latitude[1])
(collision.data$Latitude[1])
filter(collision.data, Latitude < 45)
filter(collision.data, Latitude < 50)
select(collision.data, Latitude)
select(collision.data, Latitude) %>% filter(Latitude == 47.62674)
select(collision.data, Latitude) %>% filter(Latitude < 47.62674)
select(collision.data, Latitude) %>% filter(Latitude === 47.62674)
select(collision.data, Latitude) %>% filter(Latitude == 47.62674)
collision.data <- mutate(collision.data, "Latitude" = as.numeric(lat), "Longitude" = as.numeric(lng)) %>%
select(ADDRTYPE, COLLISIONTYPE, DISTANCE, INATTENTIONIND, INCDTTM, INJURIES, JUNCTIONTYPE,
LIGHTCOND, LOCATION, PERSONCOUNT, ROADCOND, SDOT_COLDESC, SEVERITYDESC, ST_COLDESC,
VEHCOUNT, WEATHER, Latitude, Longitude, Shape)
collision.data <- read.csv("./SDOT_Collisions.csv", stringsAsFactors = FALSE)
collision.data[collision.data==""] <- NA
coordinates <- collision.data$Shape
lat <- sapply(strsplit(coordinates, split=", "), "[", 1)
lng <- sapply(strsplit(coordinates, split=", "), "[", 2)
lat <- gsub("\\(", "", lat)
lng <- gsub(")", "", lng)
collision.data <- mutate(collision.data, "Latitude" = as.numeric(lat), "Longitude" = as.numeric(lng)) %>%
select(ADDRTYPE, COLLISIONTYPE, DISTANCE, INATTENTIONIND, INCDTTM, INJURIES, JUNCTIONTYPE,
LIGHTCOND, LOCATION, PERSONCOUNT, ROADCOND, SDOT_COLDESC, SEVERITYDESC, ST_COLDESC,
VEHCOUNT, WEATHER, Latitude, Longitude, Shape)
collision.data$INATTENTIONIND[is.na(collision.data$INATTENTIONIND)] <- "N"
collision.data <- na.omit(collision.data)
View(collision.data)
select(collision.data, Latitude) %>% filter(Latitude == 47.605141668000044)
runApp()
options(digits=22)
runApp()
filter(collision.data, Latitude == 47.65044820600009956024)
filter(collision.data, Latitude == 47.6504482060000995602)
filter(collision.data, Latitude == 47.650448206000099560)
filter(collision.data, Latitude == 47.65044820600009956)
filter(collision.data, Latitude == 47.6504482060000995)
filter(collision.data, Latitude == 47.650448206000099)
filter(collision.data, Latitude == 47.65044820600009)
filter(collision.data, Latitude == 47.6504482060000)
filter(collision.data, Latitude == 47.650448206000)
filter(collision.data, Latitude == 47.65044820600)
filter(collision.data, Latitude == 47.6504482060)
filter(collision.data, Latitude == 47.650448206)
filter(collision.data, Latitude == 47.65044820)
filter(collision.data, Latitude == 47.6504482)
filter(collision.data, Latitude == 47.650448)
filter(collision.data, Latitude == 47.65044)
filter(collision.data, Latitude == 47.60514166800004431934)
filter(collision.data, Latitude == 47.49591680500003576526)
filter(collision.data, Latitude == 47.65044820600009956024)
runApp()
filter(collision.data, Latitude == 47.67769822399999668505)
View(ballard.data)
filter(collision.data, Latitude == 47.66504255300003478624)
runApp()
collision.data <- read.csv("./SDOT_Collisions.csv", stringsAsFactors = FALSE)
collision.data[collision.data==""] <- NA
coordinates <- collision.data$Shape
lat <- sapply(strsplit(coordinates, split=", "), "[", 1)
lng <- sapply(strsplit(coordinates, split=", "), "[", 2)
lat <- gsub("\\(", "", lat)
lng <- gsub(")", "", lng)
collision.data <- mutate(collision.data, "Latitude" = as.numeric(lat), "Longitude" = as.numeric(lng)) %>%
select(ADDRTYPE, COLLISIONTYPE, DISTANCE, INATTENTIONIND, INCDTTM, INJURIES, JUNCTIONTYPE,
LIGHTCOND, LOCATION, PERSONCOUNT, ROADCOND, SDOT_COLDESC, SEVERITYDESC, ST_COLDESC,
VEHCOUNT, WEATHER, Latitude, Longitude)
collision.data$INATTENTIONIND[is.na(collision.data$INATTENTIONIND)] <- "N"
collision.data <- na.omit(collision.data)
collision.data <- head(collision.data)
options(digits=22)
ballard.limits <- list(upper.lng = -122.360702, upper.lat = 47.690566, lower.lng = -122.410012, lower.lat = 47.655839)
phinney.ridge.limits <- list(upper.lng = -122.344423, upper.lat = 47.686954, lower.lng = -122.366053, lower.lat = 47.662190)
fremont.limits <- list(upper.lng = -122.342510, upper.lat = 47.665045, lower.lng = -122.367444, lower.lat = 47.648536)
greenwood.limits <- list(upper.lng = -122.344608, upper.lat = 47.705067, lower.lng = -122.365980, lower.lat = 47.683229)
university.district.limits <- list(upper.lng = -122.286484, upper.lat = 47.671793, lower.lng = -122.322104, lower.lat = 47.647687)
green.lake.limits <- list(upper.lng = -122.320072, upper.lat = 47.690502, lower.lng = -122.347323, lower.lat = 47.671085)
northgate.limits <- list(upper.lng = -122.305710, upper.lat = 47.734097, lower.lng = -122.344677, lower.lat = 47.683056)
magnolia.limits <- list(upper.lng = -122.393264, upper.lat = 47.661892, lower.lng = -122.409122, lower.lat = 47.648398)
queen.anne.limits <- list(upper.lng = -122.356687, upper.lat = 47.644524, lower.lng = -122.373650, lower.lat = 47.637816)
capitol.hill.limits <- list(upper.lng = -122.318215, upper.lat = 47.629830, lower.lng = -122.321305, lower.lat = 47.621153)
ballard.data <- collision.data %>%
filter(Longitude < ballard.limits$upper.lng & Longitude > ballard.limits$lower.lng) %>%
filter(Latitude < ballard.limits$upper.lat & Latitude > ballard.limits$lower.lat)
phinney.ridge.data <- collision.data %>%
filter(Longitude < phinney.ridge.limits$upper.lng & Longitude > phinney.ridge.limits$lower.lng) %>%
filter(Latitude < phinney.ridge.limits$upper.lat & Latitude > phinney.ridge.limits$lower.lat)
fremont.data <- collision.data %>%
filter(Longitude < fremont.limits$upper.lng & Longitude > fremont.limits$lower.lng) %>%
filter(Latitude < fremont.limits$upper.lat & Latitude > fremont.limits$lower.lat)
greenwood.data <- collision.data %>%
filter(Longitude < greenwood.limits$upper.lng & Longitude > greenwood.limits$lower.lng) %>%
filter(Latitude < greenwood.limits$upper.lat & Latitude > greenwood.limits$lower.lat)
university.district.data <- collision.data %>%
filter(Longitude < university.district.limits$upper.lng & Longitude > university.district.limits$lower.lng) %>%
filter(Latitude < university.district.limits$upper.lat & Latitude > university.district.limits$lower.lat)
green.lake.data <- collision.data %>%
filter(Longitude < green.lake.limits$upper.lng & Longitude > green.lake.limits$lower.lng) %>%
filter(Latitude < green.lake.limits$upper.lat & Latitude > green.lake.limits$lower.lat)
northgate.data <- collision.data %>%
filter(Longitude < northgate.limits$upper.lng & Longitude > northgate.limits$lower.lng) %>%
filter(Latitude < northgate.limits$upper.lat & Latitude > northgate.limits$lower.lat)
magnolia.data <- collision.data %>%
filter(Longitude < magnolia.limits$upper.lng & Longitude > magnolia.limits$lower.lng) %>%
filter(Latitude < magnolia.limits$upper.lat & Latitude > magnolia.limits$lower.lat)
queen.anne.data <- collision.data %>%
filter(Longitude < queen.anne.limits$upper.lng & Longitude > queen.anne.limits$lower.lng) %>%
filter(Latitude < queen.anne.limits$upper.lat & Latitude > queen.anne.limits$lower.lat)
capitol.hill.data <- collision.data %>%
filter(Longitude < capitol.hill.limits$upper.lng & Longitude > capitol.hill.limits$lower.lng) %>%
filter(Latitude < capitol.hill.limits$upper.lat & Latitude > capitol.hill.limits$lower.lat)
neighborhood.lng <- c(-122.385, -122.359722, -122.3499, -122.3553, -122.303333, -122.327778,
-122.328333, -122.400833, -122.356944, -122.316456)
neighborhood.lat <- c(47.677, 47.674167, 47.6505, 47.690612, 47.655, 47.680278, 47.708333,
47.650556, 47.637222, 47.622942)
neighborhood <- c("Ballard", "Phinney Ridge", "Fremont", "Greenwood", "University District", "Green Lake",
"Northgate", "Magnolia", "Queen Anne", "Capitol Hill")
count <- c(nrow(ballard.data)/4, nrow(phinney.ridge.data)/3, nrow(fremont.data)/3, nrow(greenwood.data)/3,
nrow(university.district.data)/4, nrow(green.lake.data)/3, nrow(northgate.data)/4, nrow(magnolia.data),
nrow(queen.anne.data), nrow(capitol.hill.data))
neighborhood.coordinates <- data.frame(neighborhood.lng, neighborhood.lat, neighborhood, count)
